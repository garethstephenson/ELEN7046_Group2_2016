<style>

    .v_chart rect {
        fill: white;
    }

    .v_chart text {
        fill: auto;
        font: 10px sans-serif;
        text-anchor: middle;
    }

    .axis text {
        font: 10px sans-serif;
    }

    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

</style>
<svg id="v_dataPlaceholder" class="v_chart"> Data loading, please wait ... </svg>
<script type="text/javascript">
    $(document).ready(function () {
      var dataUrl = "{{dataUrl}}";

      queue()
        .defer(d3.json, dataUrl)
        .defer(d3.json, "/data/categoryColors")
        .await(function (error, data, categoryColors) {
          if (error) {
            $('#hm_dataPlaceholder').html("error: " + error);
            return;
          }
          $('#v_dataPlaceholder').html("");
          $('#v_dataPlaceholder').height(250);
          basicVBarChart.initialise(data, categoryColors, '#v_dataPlaceholder');
        });
    });

    var basicVBarChart = {
      initialise: function (data, categoryColors, chartSvgSelector) {
        var parent = this;
        parent._setWidth(chartSvgSelector);
        parent.draw(data, categoryColors, chartSvgSelector);
        $(window).resize(function () {
          parent._setWidth(chartSvgSelector);

          d3.select(chartSvgSelector)
            .selectAll("g")
            .remove();
          $(chartSvgSelector).empty();
          parent.draw(data, categoryColors, chartSvgSelector);
        });
      },
      _setWidth: function (chartSvgSelector) {
        $(chartSvgSelector).width($(chartSvgSelector).parent().width() - 10);
      },
      draw: function (data, categoryColors, chartSvgSelector) {
        // Code developed following this tutorial: https://bost.ocks.org/mike/bar/3/
        var margin = {top: 20, right: 30, bottom: 30, left: 40};
        var width = $(chartSvgSelector).width() - margin.left - margin.right;
        var height = $(chartSvgSelector).height() - margin.top - margin.bottom;

        var x = d3.scale.ordinal()
          .rangeRoundBands([0, width], .1)
          .domain(data.map(function (item) {
            return item.Category;
          }));

        var y = d3.scale.linear()
          .range([height, 0])
          .domain([0, d3.max(data, function (item) {
              return item.Count;
            })]);

        var xAxis = d3.svg.axis()
          .scale(x)
          .orient("bottom");

        var yAxis = d3.svg.axis()
          .scale(y)
          .orient("left");

        var chart = d3.select(chartSvgSelector)
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
          .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        chart.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height + ")")
          .call(xAxis);

        chart.append("g")
          .attr("class", "y axis")
          .call(yAxis);

        var yColor = d3.scale.linear()
          .range([255, 0])
          .domain([0, d3.max(data, function (item) {
              return item.Count;
            })]);

        var bars = chart.selectAll(".bar")
          .data(data)
          .enter().append("rect")
          .attr("class", "bar")
          .attr("x", function (d) {
            return x(d.Category);
          })
          .attr("y", function (d) {
            return y(d.Count);
          })
          .attr("height", function (d) {
            return height - y(d.Count);
          })
          .attr("width", x.rangeBand());

        bars.transition().duration(1000)
          .style("fill", function (item) {

            return commonCharts.getCategoryColor(item, categoryColors);
          });

        /*
         var bar = chart.selectAll("g")
         .data(data)
         .enter().append("g")
         .attr("transform", function (d) {
         return "translate(" + x(d.Category) + ",0)";
         });
         
         bar.append("rect")
         .attr("y", function (d) {
         return y(d.Count);
         })
         .attr("height", function (d) {
         return height - y(d.Count);
         })
         .attr("width", x.rangeBand());
         
         bar.append("text")
         .attr("x", x.rangeBand() / 2)
         .attr("y", function (d) {
         return y(d.Count) + 3;
         })
         .attr("dy", ".75em")
         .text(function (d) {
         return d.Count;
         });*/
      }
    };
</script>