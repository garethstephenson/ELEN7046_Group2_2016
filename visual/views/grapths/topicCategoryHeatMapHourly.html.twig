<style>
    rect.bordered {
        stroke: #E6E6E6;
        stroke-width:2px;   
    }

    rect.bordered:hover {
        stroke: #A5A5A5;
        stroke-width:2px;
    }

    text.mono {
        font-size: 9pt;
        font-family: Consolas, courier;
        fill: #aaa;
    }

    text.axis-workweek {
        fill: #808080FF;
    }

    text.axis-worktime {
        fill: #808080FF;
    }

    .hmh_chart {
        background-color: #EFEFEF;
        border-radius: 8px;
    }
</style>
<!--<h4 id="hm_topicHeader"></h4>-->
<div id="hmh_dataPlaceholder" class="hmh_chart"> Data loading, please wait ... </div>
<script type="text/javascript">
    $(document).ready(function () {
      var dataUrl = "{{dataUrl}}";

      queue()
        .defer(d3.json, dataUrl)
        .defer(d3.json, "/data/categoryColors")
        .await(function (error, data, categoryColors) {
          if (error) {
            $('#hm_dataPlaceholder').html("error: " + error);
            return;
          }

          $('#hmh_dataPlaceholder').html("");
          $('#hmh_dataPlaceholder').height(250);
          heatMapHChart.initialise(data, categoryColors, '#hmh_dataPlaceholder');
        });
    });

    var heatMapHChart = {
      initialise: function (data, categoryColors, chartDivSelector) {
        var parent = this;
        parent._setWidth(chartDivSelector);
        parent.draw(data, categoryColors, chartDivSelector);
        $(window).resize(function () {
          parent._setWidth(chartDivSelector);

          d3.select(chartDivSelector)
            .selectAll("div")
            .remove();
          $(chartDivSelector).empty();
          parent.draw(data, categoryColors, chartDivSelector);
        });
      },
      _setWidth: function (chartDivSelector) {
        $(chartDivSelector).width($(chartDivSelector).parent().width() - 10);
      },
      draw: function (data, categoryColors, chartDivSelector) {
        // Code developed following this tutorial: http://bl.ocks.org/tjdecke/5558084

        var hours = commonCharts.make2DigitNumberArray(0, 23);
        var days = d3.map(data, function (d) {
          return commonCharts.getDateValue(d.Date);
        }).keys();

        var margin = {top: 20, right: 0, bottom: 20, left: 75};
        var width = $(chartDivSelector).width() - margin.left - margin.right;
        var gridSize = Math.floor(width / hours.length); // TODO
        var divHeight = (days.length * gridSize) + margin.top + margin.bottom + gridSize; // TODO : 
        $(chartDivSelector).height(divHeight);
        var height = $(chartDivSelector).height() - margin.top - margin.bottom;

        // Initialise chart area
        var svg = d3.select(chartDivSelector).append("svg")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
          .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        //yAxis - Days
        svg.selectAll(".dayLabel")
          .data(days)
          .enter().append("text")
          .text(function (d) {
            return d;
          })
          .attr("x", 0)
          .attr("y", function (d, i) {
            return i * gridSize;
          })
          .style("text-anchor", "end")
          .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
          .attr("class", function (d, i) {
            return ((i >= 0 && i <= 4) ? "dayLabel mono axis axis-workweek" : "dayLabel mono axis");
          });

        // xAxis - Hours
        svg.selectAll(".timeLabel")
          .data(hours)
          .enter().append("text")
          .text(function (d) {
            return d;
          })
          .attr("x", function (d, i) {
            return i * gridSize;
          })
          .attr("y", 0)
          .style("text-anchor", "middle")
          .attr("transform", "translate(" + gridSize / 2 + ", -6)")
          .attr("class", function (d, i) {
            return ((i >= 7 && i <= 16) ? "timeLabel mono axis axis-worktime" : "timeLabel mono axis");
          });

        var cards = svg.selectAll(".hour")
          .data(data);

        cards.enter().append("rect")
          .attr("x", function (item) {
            var hour = commonCharts.getHourValue(item.Date);
            var x = commonCharts.getIndexByValue(hour, hours) * gridSize;
            return x;
          })
          .attr("y", function (item) {
            var day = commonCharts.getDateValue(item.Date);
            var y = commonCharts.getIndexByValue(day, days) * gridSize;
            return y;
          })
          .attr("rx", 4)
          .attr("ry", 4)
          .attr("class", "hour bordered")
          .attr("width", gridSize)
          .attr("height", gridSize)
          .style("fill", "#FFFFFF")
          .append("title");

        var colorAlpha = d3.scale.linear()
          .domain([0, d3.max(data, function (item) {
              return d3.max(item.Data, function (categoryItem) {
                return categoryItem.Count;
              });
            })])
          .range([0, 255]);

        cards.transition().duration(1000)
          .style("fill", function (item) {
            var maxCategoryItem = commonCharts.getMaxCategoryItem(item);
            var color = commonCharts.getCategoryColor(maxCategoryItem, categoryColors);
            return color;
          })
          .style("fill-opacity", function (item) {
            var maxCategoryItem = commonCharts.getMaxCategoryItem(item);
            var alpha = colorAlpha(maxCategoryItem.Count);
            return alpha / 10;
          });

        cards.select("title").text(function (item) {
          var title = commonCharts.getDatePartValue(item.Date, "%Y-%m-%d %H:%M") + '\n';
          for (var index = 0; index < item.Data.length; index++) {
            var categoryItem = item.Data[index];
            title += categoryItem.Category + ': ' + categoryItem.Count;
            if (index < item.Data.length - 1)
              title += '\n';
          }
          return title;
        });

        cards.exit().remove();

        heatMapHChart._drawLegend(svg, categoryColors, height, gridSize);
      },
      _drawLegend: function (svg, categoryColors, height, gridSize) {
        var legendElementWidth = gridSize * 2;
        var legend = svg.selectAll(".legend")
          .data(categoryColors, function (item) {
            return item.Category + ':' + item.Color;
          });

        legend.enter().append("g")
          .attr("class", "legend");

        legend.append("rect")
          .attr("x", function (d, i) {
            return legendElementWidth * i;
          })
          .attr("y", height - gridSize)
          .attr("width", legendElementWidth)
          .attr("height", gridSize / 2)
          .attr("class", "bordered")
          .style("fill", function (d) {
            return d.Color;
          });

        legend.append("text")
          .attr("class", "mono")
          .text(function (d) {
            return d.Category;
          })
          .attr("x", function (d, i) {
            return legendElementWidth * i;
          })
          .attr("y", (height - gridSize) + (gridSize / 2) + 10);

        legend.exit().remove();
      }
    };
</script>