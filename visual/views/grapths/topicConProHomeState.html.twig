<style>

    .bar--positive {
        fill: steelblue;
    }

    .bar--negative {
        fill: brown;
    }

    .axis text {
        font: 10px sans-serif;
    }

    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }
</style>
<svg id="cp_dataPlaceholder" class="cp_chart"> Data loading, please wait ... </svg>
<script type="text/javascript">
    $(document).ready(function () {
        var dataUrl = "{{dataUrl}}";
        console.log(dataUrl);
        queue()
        .defer(d3.json, dataUrl)
        .defer(d3.json, "/data/ConProCount")
        .await(function (error, data) {
          if (error) {
            $('#cp_dataPlaceholder').html("error: " + error);
            return;
          }

          $('#cp_topicHeader').html(""); //todo: Header.Topic
          $('#cp_dataPlaceholder').html("");
          $('#cp_dataPlaceholder').height(250);
          basicCpBarChart.initialise(data,'#cp_dataPlaceholder');
        });

    });


    var basicCpBarChart = {

        initialise: function (data, chartSvgSelector) {
            var parent = this;
            parent._setWidth(chartSvgSelector);
            parent.draw(data, chartSvgSelector);
            $(window).resize(function () {
              parent._setWidth(chartSvgSelector);
              d3.select(chartSvgSelector)
                .selectAll("g")
                .remove();
              $(chartSvgSelector).empty();
              parent.draw(data,chartSvgSelector);
            });
        },
        _setWidth: function (chartSvgSelector) {
          $(chartSvgSelector).width($(chartSvgSelector).parent().width() - 10);
        },
        draw: function (data, chartSvgSelector) {
          //Adapted from: https://bl.ocks.org/mbostock/79a82f4b9bffb69d89ae

          var margin = {top: 20, right: 30, bottom: 40, left: 30},
              width = $(chartSvgSelector).width() - margin.left - margin.right,
              height = $(chartSvgSelector).height() - margin.top - margin.bottom;

          var x = d3.scale.linear().range([0, width]);

          var y = d3.scale.ordinal()
                  .rangeRoundBands([0, height], 0.1);

          var xAxis = d3.svg.axis()
                  .scale(x).orient("bottom");

          var yAxis = d3.svg.axis()
                      .scale(y).orient("right")
                      .tickSize(6, 0);
          
          var svg = d3.select(chartSvgSelector)
                      .attr("width", width + margin.left + margin.right)
                      .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

          x.domain(d3.extent(data, function(d) { return d.value; })).nice();
          y.domain(data.map(function(d) { return d.name; }));

          svg.selectAll(".bar")
              .data(data)
            .enter().append("rect")
              .attr("class", function(d) { return "bar bar--" + (d.value < 0 ? "negative" : "positive"); })
              .attr("x", function(d) { return x(Math.min(0, d.value)); })
              .attr("y", function(d) { return y(d.name); })
              .attr("width", function(d) { return Math.abs(x(d.value) - x(0)); })
              .attr("height", y.rangeBand());

          svg.append("g")
              .attr("class", "x axis")
              .attr("transform", "translate(0," + height + ")")
              .call(xAxis);

          var tickNegative = svg.append("g")
              .attr("class", "y axis")
              .attr("transform", "translate(" + x(0) + ",0)")
              .call(yAxis)
            .selectAll(".tick")
            .filter(function(d, i) { return data[i].value < 0; });

            tickNegative.select("line").attr("x2", 6);

            tickNegative.select("text")
              .attr("x", width/2)
              .style("text-anchor", "start");
          }

    };


</script>