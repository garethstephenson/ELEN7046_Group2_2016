<style>
    .streamLine {
        fill: none;
        stroke: #444444;
        stroke-width: 0.1px;
    }

    text.cph_mono {
        font-size: 9pt;
        font-family: Consolas, courier;
        fill: #aaa;
    }
    
    text.cph_mono-header {
        font-size: 10pt;
        text-decoration: underline;
    }

    .cph_chart {
        background-color: #EFEFEF;
        border-radius: 8px;
    }
</style>
<div id="cph_dataPlaceholder" class="cph_chart"> Data loading, please wait ... </div>
<script type="text/javascript">
    $(document).ready(function () {
      var dataUrl = "{{dataUrl}}";
      queue()
        .defer(d3.json, dataUrl)
        .defer(d3.json, "/data/categoryColors")
        .await(function (error, data, categoryColors) {
          if (error) {
            $('#cph_dataPlaceholder').html("error: " + error);
            return;
          }

          $('#cph_dataPlaceholder').html("");
          $('#cph_dataPlaceholder').height(250);
          cpstreamChart.initialise(data, categoryColors, '#cph_dataPlaceholder');
        });
    });
    var cpstreamChart = {
      initialise: function (data, categoryColors, chartDivSelector) {
        var parent = this;
        parent._setWidth(chartDivSelector);
        parent.draw(data, categoryColors, chartDivSelector);
        $(window).resize(function () {
          parent._setWidth(chartDivSelector);
          d3.select(chartDivSelector)
            .selectAll("div")
            .remove();
          $(chartDivSelector).empty();
          parent.draw(data, categoryColors, chartDivSelector);
        });
      },
      _setWidth: function (chartDivSelector) {
        $(chartDivSelector).width($(chartDivSelector).parent().width() - 10);
      },
      draw: function (data, categoryColors, chartDivSelector) {
        // Used the following chart as a base: 
        //      http://bl.ocks.org/mbostock/1256572
        //      http://bl.ocks.org/mbostock/4060954
        var hours = commonCharts.make2DigitNumberArray(0, 23);

        var categoryHeight = 100;
        var midLine = (categoryHeight / 2);
        var margin = {top: 20, right: 100, bottom: 30, left: 10};
        var xAxisHeight = 20;
        var width = $(chartDivSelector).width() - margin.left - margin.right;
        var divHeight = (categoryHeight * categoryColors.length) + margin.top + margin.bottom + xAxisHeight;
        $(chartDivSelector).height(divHeight);
        var height = $(chartDivSelector).height() - margin.top - margin.bottom;

        var gridSize = width / hours.length;
        cpstreamChart._drawxAxis(chartDivSelector, margin, hours, gridSize, width, xAxisHeight);

        // Hours -> Width
        var x = d3.scale.linear()
          .domain([0, hours.length - 1])
          .range([0, width]);

        var area = [];
        var dataStack = [];
        var svg = [];
        var legend = [];
        for (var categoryIndex = 0; categoryIndex < categoryColors.length; categoryIndex++) {
          var color = categoryColors[categoryIndex].Color;
          var conColor = categoryColors[categoryIndex].ConColor;

          var stackOffset = 'silhouette';
          //stackOffset = 'wiggle';
          //stackOffset = 'expand';
          //stackOffset = 'zero';

          var stack = d3.layout.stack().offset(stackOffset);
          dataStack[categoryIndex] = stack(d3.range(2).map(function (stackIndex) {
            var stackArray = [];
            $.each(data, function (index, item) {

              var yValue = stackIndex != 0 ?
                item.Data[categoryIndex].ProCount :
                item.Data[categoryIndex].ConCount;

              var element = {
                x: commonCharts.getHourValue(item.Date),
                y: yValue,
                stackIndex: stackIndex
              };
              stackArray.push(element);
            });
            return stackArray;
          }));

          // y scale max total count
          var y = d3.scale.linear()
            .domain([0, d3.max(dataStack[categoryIndex], function (stackItem) {
                return d3.max(stackItem, function (item) {
                  return (item.y + item.y0);
                });
              })])
            .range([categoryHeight, 0]);

          svg[categoryIndex] = d3.select(chartDivSelector).append("svg")
            .attr("width", width + margin.right + margin.left)
            .attr("height", categoryHeight);

          area[categoryIndex] = d3.svg.area()
            .interpolate("monotone")
            .x(function (d) {
              return margin.left + x(d.x);
            })
            .y0(function (d) {
              return y(d.y0);
            })
            .y1(function (d) {
              return y(d.y0 + d.y);
            });

          svg[categoryIndex].selectAll("path")
            .data(dataStack[categoryIndex])
            .enter().append("path")
            .attr("d", area[categoryIndex])
            .style("fill", function (d) {
              if (d.length > 0) {
                if (d[0].stackIndex != 0)
                  return color;
                else
                  return conColor; //commonCharts.invertColor(color);
              }
              return "#FFFFFF";
            });

          cpstreamChart._drawLine(svg[categoryIndex], width, margin, midLine);

          // TODO : legend

          var legendItemHeight = 15;
          var legendTextOffset = 8;

          legend[categoryIndex] = svg[categoryIndex].selectAll(".legend")
            .data(categoryColors, function (item) {
              return item.Category + ':' + item.Color;
            });

          legend[categoryIndex].enter().append("g")
            .attr("class", "legend");

          legend[categoryIndex].append("rect")
            .attr("x", function (d, i) {
              return width + margin.left;
            })
            .attr("y", function (d) {
              return midLine - legendItemHeight;
            })
            .attr("width", legendItemHeight)
            .attr("height", legendItemHeight)
            .attr("class", "bordered")
            .style("fill", function (d) {
              return categoryColors[categoryIndex].Color;
            });

          legend[categoryIndex].append("rect")
            .attr("x", function (d, i) {
              return width + margin.left;
            })
            .attr("y", function (d) {
              return midLine;
            })
            .attr("width", legendItemHeight)
            .attr("height", legendItemHeight)
            .attr("class", "bordered")
            .style("fill", function (d) {
              return categoryColors[categoryIndex].ConColor;
            });

          svg[categoryIndex].append("text")
            .attr("y", legendTextOffset + (midLine - legendItemHeight * 2))
            .attr("x", width + margin.left + legendItemHeight + 2)
            .attr("dy", ".31em")
            .attr("class", "cph_mono cph_mono-header")
            .text(categoryColors[categoryIndex].Category);

          svg[categoryIndex].append("text")
            .attr("y", legendTextOffset + (midLine - legendItemHeight))
            .attr("x", width + margin.left + legendItemHeight + 2)
            .attr("dy", ".31em")
            .attr("class", "cph_mono")
            .text("Pro");

          svg[categoryIndex].append("text")
            .attr("y", legendTextOffset + midLine)
            .attr("x", width + margin.left + legendItemHeight + 2)
            .attr("dy", ".31em")
            .attr("class", "cph_mono")
            .text("Con");

        }
      },
      _drawLine: function (svg, width, margin, midLine) {
        var lineFunction = d3.svg.line()
          .x(function (d) {
            return margin.left + d.x;
          })
          .y(function (d) {
            return d.y;
          })
          .interpolate("linear");

        var lineData = [{x: 0, y: midLine}, {x: width, y: midLine}]

        svg.append("path").attr("d", lineFunction(lineData))
          .attr("class", "streamLine");
      },
      _drawStream: function (svg, margin, hours, stackData) {

      },
      _drawxAxis: function (chartDivSelector, margin, hours, gridSize, width, xAxisHeight) {
        var svg = d3.select(chartDivSelector).append("svg")
          .attr("width", width + margin.right + margin.left)
          .attr("height", xAxisHeight);
        // xAxis - Hours
        svg.selectAll(".timeLabel")
          .data(hours)
          .enter().append("text")
          .text(function (d) {
            return d;
          })
          .attr("x", function (d, i) {
            return margin.left + i * gridSize;
          })
          .attr("y", margin.top - 5)
          .style("text-anchor", "middle")
          .attr("class", function (d, i) {
            return ((i >= 7 && i <= 16) ? "timeLabel mono axis axis-worktime" : "timeLabel mono axis");
          });
      }
    };
</script>