<style>
    rect.bordered {
        stroke: #E6E6E6;
        stroke-width:2px;   
    }

    text.mono {
        font-size: 9pt;
        font-family: Consolas, courier;
        fill: #aaa;
    }

    text.axis-workweek {
        fill: #808080FF;
    }

    text.axis-worktime {
        fill: #808080FF;
    }
</style>
<!--<h4 id="hm_topicHeader"></h4>-->
<div id="hm_dataPlaceholder" class="hmc_chart"> Data loading, please wait ... </div>
<script type="text/javascript">
    $(document).ready(function () {
      var dataUrl = "{{dataUrl}}";

      queue()
        .defer(d3.json, dataUrl)
        .defer(d3.json, "/data/categoryColors")
        .await(function (error, data, categoryColors) {
          if (error) {
            $('#hm_dataPlaceholder').html("error: " + error);
            return;
          }

          $('#hm_dataPlaceholder').html("");
          $('#hm_dataPlaceholder').height(250);
          heatMapChart.initialise(data, categoryColors, '#hm_dataPlaceholder');
        });
    });

    var heatMapChart = {
      initialise: function (data, categoryColors, chartDivSelector) {
        var parent = this;
        parent._setWidth(chartDivSelector);
        parent.draw(data, categoryColors, chartDivSelector);
        $(window).resize(function () {
          parent._setWidth(chartDivSelector);

          d3.select(chartDivSelector)
            .selectAll("div")
            .remove();
          $(chartDivSelector).empty();
          parent.draw(data, categoryColors, chartDivSelector);
        });
      },
      _setWidth: function (chartDivSelector) {
        $(chartDivSelector).width($(chartDivSelector).parent().width() - 10);
      },
      _getMergedData: function (data, dates) {
        var mergedArray = [];
        for (var index = 0; index < data.length; index++) {
          var item = data[index];
          for (var categoryIndex = 0; categoryIndex < item.Data.length; categoryIndex++) {
            var categoryItem = item.Data[categoryIndex];
            mergedArray.push({
              'Date': item.Date,
              'Category': categoryItem.Category,
              'Count': categoryItem.Count,
              'CategoryIndex': categoryIndex,
              'DateIndex': heatMapChart._getIndexByValue(item.Date, dates)
            });
          }
        }
        return mergedArray;
      },
      _getIndexByValue: function (value, array) {
        for (var index = 0; index < array.length; index++) {
          if (array[index] == value) {
            return index;
          }
        }
        return -1;
      },
      _getDates: function (data) {
        var dateArray = [];
        for (var index = 0; index < data.length; index++) {
          var item = data[index];
          dateArray.push(item.Date);
        }
        return dateArray;
      },
      _getCategories: function (data) {
        // TODO : See if D3 can't extract this better
        var categoryArray = [];

        if (data.length > 0) {
          for (var index = 0; index < data[0].Data.length; index++) {
            var item = data[0].Data[index];

            categoryArray.push(item.Category);
          }
        }
        return categoryArray;
      },
      draw: function (data, categoryColors, chartDivSelector) {
        // Code developed following this tutorial: http://bl.ocks.org/tjdecke/5558084
        
        if (data == null || data.length <= 0)
            return;
        
        var
          categoreis = heatMapChart._getCategories(data),
          dates = heatMapChart._getDates(data);

        var margin = {top: 50, right: 0, bottom: 50, left: 30};
        var width = $(chartDivSelector).width() - margin.left - margin.right;
        var gridSize = Math.floor(width / dates.length);
        var divHeight = (categoreis.length * gridSize) + margin.top + margin.bottom + gridSize;
        $(chartDivSelector).height(divHeight);
        var height = $(chartDivSelector).height() - margin.top - margin.bottom;

        var
          legendElementWidth = gridSize * 2,
          colors = ["#FBEFEF", "#F5A9A9", "#F78181", "#FA5858", "#FE2E2E", "#FF0000", "#DF0101", "#B40404", "#8A0808"],
          buckets = 9;

        var svg = d3.select(chartDivSelector).append("svg")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
          .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var dayLabels = svg.selectAll(".dayLabel")
          .data(categoreis)
          .enter().append("text")
          .text(function (d) {
            return d;
          })
          .attr("x", 0)
          .attr("y", function (d, i) {
            return i * gridSize;
          })
          .style("text-anchor", "end")
          .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
          .attr("class", function (d, i) {
            return ((i >= 0 && i <= 4) ? "dayLabel mono axis axis-workweek" : "dayLabel mono axis");
          });

        var timeLabels = svg.selectAll(".timeLabel")
          .data(dates)
          .enter().append("text")
          .text(function (d) {
            return commonCharts.getDayValue(d);
          })
          .attr("x", function (d, i) {
            return i * gridSize;
          })
          .attr("y", 0)
          .style("text-anchor", "middle")
          .attr("transform", "translate(" + gridSize / 2 + ", -6)")
          .attr("class", function (d, i) {
            return ((i >= 7 && i <= 16) ? "timeLabel mono axis axis-worktime" : "timeLabel mono axis");
          });

        var mergedData = heatMapChart._getMergedData(data, dates);

        var colorScale = d3.scale.quantile()
          .domain([0, buckets - 1, d3.max(mergedData, function (item) {

              return item.Count;

            })])
          .range(colors);

        var colorAlpha = d3.scale.linear()
          .domain([0, d3.max(mergedData, function (item) {
              return item.Count;
            })])
          .range([0, 255]);

        var cards = svg.selectAll(".hour")
          .data(mergedData, function (item) {
            return item.Date + ':' + item.Category + ':' + item.Count;
          });

        cards.enter().append("rect")
          .attr("x", function (item) {
            return (item.DateIndex) * gridSize;
          })
          .attr("y", function (item) {
            return (item.CategoryIndex) * gridSize;
          })
          .attr("rx", 4)
          .attr("ry", 4)
          .attr("class", "hour bordered")
          .attr("width", gridSize)
          .attr("height", gridSize)
          .style("fill", colors[0])
          .append("title", function (item) {
            return item.Count;
          });


        cards.transition().duration(1000)
          .style("fill", function (item) {
            for (var index = 0; index < categoryColors.length; index++) {
              var colorItem = categoryColors[index];
              if (item.Category == colorItem.Category) {
                return colorItem.Color;
              }
            }
            return "#000000";
          })
          .style("fill-opacity", function (item) {
            var alpha = colorAlpha(item.Count);
            return alpha / 100;
          });

        /*
         cards.transition().duration(1000)
         .style("fill", function (d) {
         return colorScale(d.Count);
         });
         */

        cards.select("title").text(function (d) {
          return d.Count;
        });

        cards.exit().remove();

        var legend = svg.selectAll(".legend")
          .data(categoryColors, function (item) {
            return item.Category + ':' + item.Color;
          });

        legend.enter().append("g")
          .attr("class", "legend");

        legend.append("rect")
          .attr("x", function (d, i) {
            return legendElementWidth * i;
          })
          .attr("y", height - gridSize)
          .attr("width", legendElementWidth)
          .attr("height", gridSize / 2)
          .attr("class", "bordered")
          .style("fill", function (d) {
            return d.Color;
          });

        legend.append("text")
          .attr("class", "mono")
          .text(function (d) {
            return d.Category;
          })
          .attr("x", function (d, i) {
            return legendElementWidth * i;
          })
          .attr("y", (height - gridSize) + (gridSize / 2) + 10);

        legend.exit().remove();


      }
    };
</script>